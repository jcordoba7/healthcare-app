version: 0.1
component: build
timeoutInSeconds: 6000
runAs: root
shell: bash
env:
  # these are local variables to the build config
  variables:
    key: "value"

  # the value of a vaultVariable is the secret-id (in OCI ID format) stored in the OCI Vault service
  # you can then access the value of that secret in your build_spec.yaml commands
  vaultVariables:
    OCIR_REGION_VAULT: ocid1.vaultsecret.oc1.phx.amaaaaaau2o4l2iahbs3u7i3j3zsjvc3hoczxgkca5buwqcsilnwpp2pfqna
    OCIR_STORAGE_NAMESPACE_VAULT: ocid1.vaultsecret.oc1.phx.amaaaaaau2o4l2iaqxmlrqphtm6rqolio3anoo6q4qi3vbbisfsl5xbd36vq
  
  # exportedVariables are made available to use as parameters in sucessor Build Pipeline stages
  # For this Build to run, the Build Pipeline needs to have a BUILDRUN_VERSION parameter set
  exportedVariables:
    - BUILDRUN_VERSION
    - OCIR_REGION
    - OCIR_STORAGE_NAMESPACE

steps:
  - type: Command
    name: "Define unique image tag"
    timeoutInSeconds: 40
    command: |
      export BUILDRUN_VERSION=`echo ${OCI_BUILD_RUN_ID} | rev | cut -c 1-7`
      echo "BUILDRUN_VERSION: " $BUILDRUN_VERSION

  - type: Command
    name: "Extract Export variables"
    timeoutInSeconds: 20
    command: |
      echo transferring the OCIR_REGION and OCIR_STORAGE_NAMESPACE vault variables
      export OCIR_REGION=$OCIR_REGION_VAULT
      echo OCIR_REGION is $OCIR_REGION
      export OCIR_STORAGE_NAMESPACE=$OCIR_STORAGE_NAMESPACE_VAULT
      echo OCIR_STORAGE_NAMESPACE is $OCIR_STORAGE_NAMESPACE
      echo Image will be stored to ${OCIR_REGION}/${OCIR_STORAGE_NAMESPACE}/${MY_INITIALS}devops/node-express:${BUILDRUN_VERSION}
    onFailure:
      - type: Command
        timeoutInSeconds: 40
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 400
        runAs: root      

  - type: Command
    timeoutInSeconds: 600
    name: "Install Node Prereqs"
    command: |
      echo The workspace is ${OCI_WORKSPACE_DIR}
      cd ${OCI_WORKSPACE_DIR}/node_express
      # install nvmf
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
      nvm install lts/erbium
      echo "NODE VERSION: $(node -v)"
      echo "NPM VERSION: $(npm -v)"
    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root
  
  - type: Command
    timeoutInSeconds: 600
    name: "NPM install"
    command: |
      cd ${OCI_WORKSPACE_DIR}/node_express
      npm install
    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root

  - type: Command
    timeoutInSeconds: 1200
    name: "Run Tests"
    command: |
      cd ${OCI_WORKSPACE_DIR}/node_express
      npm test

  - type: Command
    timeoutInSeconds: 1200
    name: "Build container image"
    command: |
      cd ${OCI_WORKSPACE_DIR}/node_express
      docker build --pull --rm -t node-express-getting-starter .git add .
      docker tag node-express-getting-starter jcordoba77/dockerhub-repository:${BUILDRUN_VERSION}
    #docker push jcordoba77/dockerhub-repository:${BUILDRUN_VERSION}


outputArtifacts:
  - name: node_express_container_image
    type: DOCKER_IMAGE
    # this location tag doesn't effect the tag used to deliver the container image
    # to the Container Registry
    location: node-express-getting-starter:latest
  - name: deployment_yaml
    type: BINARY
    location: ${OCI_WORKSPACE_DIR}/node_express/gettingstarted-manifest.yaml
